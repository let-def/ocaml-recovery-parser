(*
 * SPDX-FileCopyrightText: 2021 Serokell <https://serokell.io/>
 * SPDX-License-Identifier: MPL-2.0

 * Copyright (c) 2019 Frédéric Bour
 * SPDX-License-Identifier: MIT
 *)

(* Minimal signature that required from user for debug printing (tracing) *)

module type USER_PRINTER =
  sig
    module I : MenhirLib.IncrementalEngine.EVERYTHING

    val print : string -> unit
    val print_symbol : I.xsymbol -> unit
    val print_element : (I.element -> unit) option
    val print_token : I.token -> unit
  end

(* Full signature
     That separation allows users to redefine functions from full interface *)

module type PRINTER =
  sig
    include USER_PRINTER

    val print_current_state : 'a I.env -> unit
    val print_env : 'a I.env -> unit
  end

(* Make full parser from minimal one *)

module MakePrinter (U : USER_PRINTER) : PRINTER with module I = U.I

(* Simple printer that do nothing. Useful if debug isn't used *)

module DummyPrinter (I: MenhirLib.IncrementalEngine.EVERYTHING)
       : PRINTER with module I = I

(*  Signature of module that is generated by the [merlin_recover] *)

module type RECOVERY_GENERATED =
  sig
    module I : MenhirLib.IncrementalEngine.EVERYTHING

    val default_value : 'a I.symbol -> 'a

    type action =
      | Abort
      | R of int
      | S : 'a I.symbol -> action
      | Sub of action list

    type decision =
      | Nothing
      | One of action list
      | Select of (int -> action list)

    val depth : int array

    val can_pop : 'a I.terminal -> bool

    val recover : int -> decision


    val token_of_terminal : 'a I.terminal -> 'a -> I.token

    val nullable : 'a I.nonterminal -> bool

    val print_symbol : 'a I.symbol -> string
  end

module type RECOVERY =
  sig
    include RECOVERY_GENERATED

    (* User customization functions *)

    (* Like [RECOVERY_GENERATED.default], but also can use current parsing position. *)
    val default_value : Custom_compiler_libs.Location.t -> 'a I.symbol -> 'a

    (* Customization that slightly affects on internal heuristics of choosing recovery ways.
       But returning [false] always also works well in many cases. *)
    val guide : 'a I.symbol -> bool
    
    val use_indentation_heuristic : bool
  end

module Make
    (Parser   : MenhirLib.IncrementalEngine.EVERYTHING)
    (Recovery : RECOVERY with module I := Parser)
    (Printer  : PRINTER with module I = Parser) :
sig

  type 'a candidate = {
    line: int;
    min_col: int;
    max_col: int;
    env: 'a Parser.env;
  }

  type 'a candidates = {
    shifted: Parser.xsymbol option;
    final: 'a option;
    candidates: 'a candidate list;
  }

  val attempt : 'a candidates ->
    Parser.token * Lexing.position * Lexing.position ->
    [> `Accept of 'a
    | `Fail
    | `Ok of 'a Parser.checkpoint * 'a Parser.env ]

  val generate : 'a Parser.env -> 'a candidates

end
